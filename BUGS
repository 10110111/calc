If you notice something wrong, strange or broken, try rereading:

   README.FIRST
   HOWTO.INSTALL
   BUGS (this file)

If that does not help, cd to the calc source directory and try:

   make check

Look at the end of the output, it should say something like:

    9998: passed all tests  /\../\
    9999: Ending regression tests

If it does not, then something is really broken!

If you made and modifications to calc beyond the simple Makefile
configuration, try backing them out and see if things get better.

To be sure that your version of calc is up to date, check out:

	http://reality.sgi.com/chongo/tech/comp/calc/calc-download.html

The calc web site is located at:

	http://reality.sgi.com/chongo/tech/comp/calc/index.html

=-=

If you have tried all of the above and things still are not right,
then it may be time to send in a bug report.  You can send bug reports to:

    calc-bugs at postofc dot corp dot sgi dot com

    [[ Replace 'at' with @, 'dot' is with . and remove the spaces ]]

When you send your report, please include the following information:

    * a description of the problem

    * the version of calc you are using (if you cannot get calc
      it to run, then send us the 4 #define lines from version.c)

    * if you modified calc from an official patch, send me the mods you made

    * the type of system you were using

    * the type of compiler you were using

    * any compiler warnings or errors that you saw

    * cd to the calc source directory, and type:

	make debug > debug.out 2>&1		(sh, ksh, bash users)
	make debug >& debug.out			(csh, tcsh users)

      and send the contents of the 'debug.out' file.

Stack traces from core dumps are useful to send as well.

=-=

Send any comments, compiler warning messages, suggestions and most
importantly, fixes (in the form of a context diff patch) to:

    calc-tester at postofc dot corp dot sgi dot com

    [[ Replace 'at' with @, 'dot' is with . and remove the spaces ]]

You should use the above calc-bugs address for bug reports, if you are
not currently a member of the calc-tester mailing list.

=-=

Known bugs:

    * Calc does not support the #! exec method.  For example of the
      following is placed in an executable file (assume the path to
      calc is correct) called /tmp/xyzzy:

	    #!/usr/local/bin/calc
	    /*
	     * comment
	     */
	    print 2+3;

      Will result in '"tmp" is undefined' and '"xyzzy" is undefined'
      error messages because calc considers $0 as an expression to
      evaluate.

    * The following file:

	    /* this is bugdemo.cal */
	    x = eval(prompt(">>> "));
	    print x;

      when executed as:

	    calc read bugdemo.cal

      will obtain a prompt from the terminal, print the value but leave
      the terminal in a 'bad' state, as if stty -icanon -echo -echoe
      had been executed.

    * Use of 'fmt' in the 2nd arg of printf() calls in c_sysinfo.c
      cause some compilers to issue warnings.

    We are sure some more bugs exist.  When you find them, please let
    us know!  See the above for details on how to report and were to
    EMail your bug reports and hopefully patches to fix them.

=-=

Other items of note:

    * There is a bug in gcc-2.95 that causes calc, when compiled with -O2,
      to fail the regression test.  The work-a-round is to compile with -O
      or to use gcc-2.96 or later.

    * There is a bug in some versions of the Dec/Compaq cc for the Alpha
      where the following:

	    #include <stdio.h>
	    #define SVAL(a,b) (unsigned long)(0x ## a ## b ## ULL)
	    main(){SVAL(b8a8aeb0,8168eadc);}

      fails because it puts a space inside the concatenated hex.  Calc
      has code that is affected by this bug.  This bug has been reported
      to Compaq and may be fixed in the future.  A work-a-round is to
      compile with cc -std0 or to use a later version of their compiler.

    * On a Digital UNIX V4.0F (Rev. 1229) on a 500 Mhz 21264, make check
      dies a horrible death starting in test 600 and 622 gives 100s of
      messages for calc version 2.11.0t9.4 using the Dec's cc with -O2:

	600: Beginning test_bignums
	601: muldivcheck 1
	**** abc != acb: 602: muldivcheck 2
	**** acb != bac: 602: muldivcheck 2
	...
	**** t4 != a4: 622: algcheck 1
	**** t5 != a5: 622: algcheck 1
	**** t6 != a6: 622: algcheck 1
	**** t4 != a4: 622: algcheck 1
	...

	it finally hangs at test 2000.

      The work-a-round is to compile calc without the optimizer.  If this
      happens to you, try compiling without -O and without -O2.  I.e., in
      the Makefile, set:

	DEBUG= -g

    * The sparcv9 support for 64 bit Solaris under gcc-2.96 is able
      to compile calc, but calc dumps core very early on in startup.
      It is said that sparcv9 support in gcc-2.96 is very unofficial.
      There is no work-a-round for this compile problem.
