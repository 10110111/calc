If you notice something wrong, strange or broken, try rereading:

   README.FIRST
   HOWTO.INSTALL
   BUGS (this file)

If that does not help, cd to the calc source directory and try:

   make check

Look at the end of the output, it should say something like:

    9998: passed all tests  /\../\
    9999: Ending regression tests

If it does not, then something is really broken!

If you made and modifications to calc beyond the simple Makefile
configuration, try backing them out and see if things get better.

To be sure that your version of calc is up to date, check out:

	http://reality.sgi.com/chongo/calc/calc-download.html

The calc web site is located at:

	http://reality.sgi.com/chongo/calc

=-=

If you have tried all of the above and things still are not right,
then it may be time to send in a bug report.  You can send bug reports to:

    calc-tester@postofc.corp.sgi.com

When you send your report, please include the following information:

    * a description of the problem

    * the version of calc you are using (if you cannot get calc
      it to run, then send us the 4 #define lines from version.c)

    * if you modified calc from an official patch, send me the mods you made

    * the type of system you were using

    * the type of compiler you were using

    * any compiler warnings or erros that you saw

    * cd to the calc source directory, and type:

	make debug > debug.out 2>&1		(sh, ksh, bash users)
	make debug >& debug.out			(csh, tcsh users)

      and send the contents of the 'debug.out' file.

Stack traces from core dumps are useful to send as well.

=-=

Send any comments, compiler warning messages, suggestions and most
importantly, fixes (in the form of a context diff patch) to:

    calc-tester@postofc.corp.sgi.com

=-=

Known problems or mis-features:

    * Many of and SEE ALSO sections of help files
      for builtins are either inconsistent or missing information.

    * Many of the LIBRARY sections are incorrect now that libcalc.a
      contains most of the calc system.

    * There is some places in the source with obscure variable names
      and not much in the way of comments.  We need some major cleanup
      and documentation.

    * On Solaris cc when compile with -Xc (which results in BASEB=16
      because it eliminates the long long type), some of the hash
      functions fail.

      NOTE: As a work-a-round, Solaris cc users should compile
	    with -DFORCE_STDC and without -Xc.

	From: "Dr.D.J.Picton" <dave@aps5.ph.bham.ac.uk>
	Subject: Re: calc version 2.11.0t4
	Date: Fri, 1 Oct 1999 16:12:30 +0100 (BST)

	**** Non-true result (0): 7120: sha(sha(isqrt(2e1000)==0x6db8d9cf0b018b8f9cbbf5aa1edb8066d19e1bb0
	7120 result came out as 0x2f19f0baa7824cb8da5e9908044a3f648e992
	**** Non-true result (0): 7122: sha(sha("this is", 7^19-8, ..., "hash")) == 0x21e4...
	7122 result came out as 0xa050ece371eda88a461afcb807091f7613aa4488
	7123: z = sha(list(1,2,3), "curds and whey", 2^21701-1, pi());
	**** Non-true result (0): 7124: sha(z) == 0x36dcca3e51865c30a2cf738023cda446f1368340
	7124 result came out as 0xccaff4f97187821018d983cc0ce51787fb96a73c
	**** Non-true result (0): 7209: sha1(sha1("this is",7^19-8,"a composit",3i+4.5,"hash")) == ...
	7209 result came out as 0xb9631fea54a3e999521efa99745d2e2a5f65cd3b
	7210: z = sha1(list(1,2,3), "curds and whey", 2^21701-1, pi());
	**** Non-true result (0): 7211: sha1(z) == 0xc19e7317675dbf71e293b4c41e117169e9da5b6f
	7211result came out as 0xb8e5c8fdbbe4539cf601b0f6eb874f9662edb50c
	**** Non-true result (0): 7227: sha1(sha1(isqrt(2e1000)))==0x6852a1365c51050c3d039e3c5d9cf29c12283ef4
	7227 result came out as 0x91018a59d87c7d945451538412cadd56b7ec4681
	**** Non-true result (0): 7310: md5(md5("this is", 7^19-8, "a composit", 3i+4.5, "hash")) == ...
	7310 result came out as 0x65c29173098713fdec0f319551355243
	7311: z = md5(list(1,2,3), "curds and whey", 2^21701-1, pi());
	**** Non-true result (0): 7312: md5(z) == 0x63d2b2fccae2de265227c30b05abb6b5
	7311 result came out as 0x1ba0c3eb5ba11dfe11394c0837f52d85
	**** Non-true result (0): 7328: md5(md5(isqrt(2e1000))) == 0xe56ac4b8cad869e738a04fedc97058f3
	7328 result came out as 0x5afae12a1db610da2846c35f2bf144b0

	**** 9 error(s) found  \/++\/
	9999: Ending regression tests

    * On a Dec Alpha, make check for version 2.11.0t1 core dumps:

	From vandermj@molbio.sbphrd.com  Fri Sep 24 06:15:28 1999
	Subject: Re: calc version 2.11.0t1
	Date: Fri, 24 Sep 1999 09:15:02 -0400

	It dies as follows:

	...
	1802: a = surd(2,3)
	1803: a == surd(2,3)
	1804: surd_value(a) == 2+3i
	Segmentation fault

	dbx shows:
	signal Segmentation fault at   [objcall:155 +0xc,0x1200507b4]   index = oap->actions[action];
	(dbx) where
	>  0 objcall(action = 14, v1 = 0x1400203d0, v2 = 0x1400203e0, v3 = (nil)) ["obj.c":155, 0x1200507b4]
	   1 comparevalue(v1 = 0x1400203d0, v2 = 0x1400203e0) ["value.c":2329, 0x12007f250]
	   2 o_eq() ["opcodes.c":2659, 0x12003728c]
	   3 calculate(fp = 0x14007fce0) ["opcodes.c":3614, 0x12003942c]
	   4 o_usercall(fp = 0x14007fce0, index = 39, argcount = 0) ["opcodes.c":2602, 0x120037080]
	   5 calculate(fp = 0x14003bfa0) ["opcodes.c":3622, 0x120039488]
	   6 evaluate(nestflag = 14) ["codegen.c":210, 0x120028768]
	   7 getcommands(toplevel = 536864560) ["codegen.c":158, 0x1200285bc]
	   8 getcommands(toplevel = 536864560) ["codegen.c":122, 0x1200284dc]
	   9 main() ["calc.c":279, 0x12001f61c]

      Michel van der List reports that he was using the Dec compiler.

      However On 25-Sep-99  9:18, Ernest Bowen wrote:

	Last night I downloaded 2.11.0t1 and without changing Makefile
	or anything else did a make and make check.  Absolutely no
	reported errors or warnings and the check "passed all tests".
	The machine I'm using is a Dec 20 alpha running Digitial
	UNIX V4.0B (Rev 564).

      Ernest Bowen was using gcc.

      We definitely want to hunt down this Dec's cc compiler issue.  It
      could very well be that gcc is letting something slide where as
      Dec's cc compiler is compiling it faithfully into core dumping code.
      The fault could very well be the calc code and not the compiler.

      Any more information on calc core dumps compiled with Dec's cc compiler
      would be most appreciated!
